package com.company.Concurrency;

public class ShortExamples {
    /*

    동시성과 깜끔한 코드는 양립하기 어렵다
    아주 주옥같다.

    동시성은 결합을 없애서 무엇과 언제를 분리하는것이다.
    구조와 효율은 좋아진다.
    하지만 말처럼 간단한 방법은 아니다.

    미신과 오해
    - 동시성은 항상 성능을 높여준다? -> 항상은 아니다. 처리시간이 너무 길어 여러 스레드가 프로세서를 공유할 수 있거나 동시에 처리할정도로 연산량이 많을때만이다. 이는 흔하지 않다.
    - 동시성을 구현해도 설계는 변하지 않는다 -> 설계는 달라진다. 무엇과 언제를 분리하면 당연히 설계가 달라진다.


   엄연한 사실
   - 동시성은 다소 부하를 유발한다. 코드도 늘어난다.
   - 복잡하고 버그 재현이 힘들다.
   - 근본적이 설계부터 재고해봐야한다.

   동시성 코드를 안전하게 할려면

   -SRP를 확실히 하자. 동시성 하나만 집중해야 한다. 꼭 다른 코드와 분리하자.

   - 자료 범위를 제한하라
   - 자료 사본을 사용하라(공유를 최대한 하지 말자)
   - 스레드는 가능한 독립적으로 구현하라
   - 라이브러리를 이해하라. 자바 8이후는 이쁘게 잘 해두었다.
   - synchronized라는 개념 잘 활용하자

   데드락 주의하고 동기화하는부분을 작게하자.

   테스트할때는
   - 말이 안되는 실패는 잠정적 스레드 문제
   - 프로세스 수 보다 많ㅇ느 스레드를 굴려보면 버그 잘나옴
   - 다른 플랫폼에서도 굴려보자
   - 강제로 실패도 시켜보자

   어지럽다. 나중에 다시 봐야지.
     */

}
