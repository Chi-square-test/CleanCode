package com.company.Function;

public class ShortExamples {
    /*
    함수는 작게, 더 작게 만들어야 한다.

    블록내 함수는 중첩이 가급적 생기면 안된다.

    함수는 하나의 일만 처리하자.

    섹션이 나뉜다면 여러 작업을 한다는 방증이다. 나누자.

    추상화 수준은 점차 내려가게끔 해야한다.

    스위치문은 작게 만들기 힘들다.
    하지만 완전히 피하기는 힘들다.

    다형객체를 생성해야하는 경우는 한번정도만...


    서술적인 이름을 사용하라. 이펙티브자바와 살짝 대치되지만...
    길더라도 이름으로 설명하능한 이름을 쓰자. 주석보다 훨씬 좋다.
    일관성도 있어야 하고.

    함수 인수는 적으면 적을 수록 이상적이다.

    인수 1개는 보통 질문을 넘기는 경우이다. 아니면 변환하거나.
    이는 구분하자.

    가끔 이벤트함수도 존재한다. 조심히 쓸것.

    위 경우가 아니라면 단항함수는 피하는것이 좋다.

    플래그 인수는 추하다(좀 많이 찔리는데.................)

    bool 값 넘기지 말자.... ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
    아

    일 2개한다고 대놓고 써놓는거라고 한다. 두개로 쪼개자.

    이항 함수는 단항보다도 어지럽다.
    가끔 적절한건 있긴 하다. 좌표같은거. 불가피한 경우도 있고.
    다만 그만큼 골아프다는 점.

    삼항은 자제하자. 명백하게 써야하는 경우 제외하고선...

    move(int x, int y , int z)
    move(Point3D point)

    새로운 객체를 생성해 인수를 줄이는건 눈속임이 아니다. 결국 개념을 표현하기 때문이다.
    가변인데 삼항 넘어가면 문제 있다.

    move(int x, int y , int z)

    단항함수는 함수와 인수가 동사/명사 매칭이 되어야 한다.
    wrtie(name) 라던가

    부수효과는 일으키지 말자.

    쪼개던가 명시를 하던가.

    출력인수는 객체지향에선 절대 쓰지 말자.


    명령과 조회를 분리해야 한다.
    하나만 하자 하나만. 같이 처리해버리면 헷갈린다.

    오류코드를 반환하지 말고 그냥 throws Exception을 애용하자.
    중첩은 내다 버려야한다.

    근데 try/catch도 추하긴 하다. 얘도 별도로 빼자.

    근데 오류처리도 작업이다. 오류만 처리하자.

    재차 말하지만 오류코드 치우자.

    반복을 하지말자. 코드 중복은 절대악이다.

    다익스트라 왈 return은 하나, break나 continue는 쓰면 안되고 goto는 금지이다.

    하지만 함수가 클 때 이야기지 작은건 return 여러개, break나 continue 막 써도 된다. 하지만 goto는 ㄴㄴ

    많이 해보자 많이

    코드 커찮아서 생략.





     */


}
