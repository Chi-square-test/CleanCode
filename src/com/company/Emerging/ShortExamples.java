package com.company.Emerging;

public class ShortExamples {
/*
   설계는 단순하다.
   다음과 같은 단순한 규칙(중요도 순임)이 설계품질을 높여준다 믿는다.

   1. 모든 테스트를 실행한다.

   설계는 의도한대로 돌아가는 시스템을 내놓아야 한다.
   테스트가 가능한 시스템은 당연하지만 중요하다. 테스트가 불가능한건 검증도 불가능하다. 이는 출시해선 안된다.
   SRP를 준수하면 테스트는 월씬 쉽다.
   테케가 많을수록 개발자는 쉽게 코드를 작성한다.
   결합도가 높을수록 작성하기가 어렵다. 그러므로 DIP(SOLID중 D) 같은 훤칙을 적용해 DI,인터페이스, 추상화 등을 사용해 결합도를 낮춰 설계 품질을 높인다.
   테케를 만들고 계속 돌리면 신기하게도 낮은 결합도와 높은 응집력이라는 객체지향 방법론의 목표를 달성할 수 있다.

   테케를 다 짰으면 코드와 클래스를 점진적으로 리팩토링해보자. 태케가 있으므로 과감한 시도를 해보아도 괜찮다.
   뭐든 적용해보자. 응집도를 높이고 결합도를 낮추고 관심사를 분리하고 더 나음 이름을 써보고 이후 나머지 3개의 규칙을 최대한 적용해보고..
   그러는 단계이다.

   2. 중복을 없앤다.
   중복은 적이다.
   중복은 추가작업,추가위험, 불필요한 복잡도를 의미한다.
   똑같은 코드는 당연히 중복이다. 비슷한 코드는 더 비슷하게 바꾸면 리팩토링 하기 좋다.
   구현 중복도 중복이다. size와  isEmpty를 구현할때 size를 이요해 isEmpty를 구현하면 중복이 없어진다.

   공통적인 코드를 새 매서드로 바꿔보자.
   새 매서드로 뽑으면 SRP를 위반하는가? 그러면 다른 클래스로 옮겨보자.
   이런 소규모 재사용은 시스템 복잡도를 극적으로 줄여준다.

   템플릿 메서드 패턴은 고차원 중복을 제거할 목적으로 자주 쓴다.
   중복되는거는 제거하고 구멍난 부분은 하위클래스에서 제공하여 구멍을 매꾼다.


   3. 프로그래머 의도를 표현한다.

   프로젝트 비용중 대다수는 유지보수이다.
   좋은 이름을 전택하고, 함수와 클래스 크기를 가능한 한 중인다.
   표준 명칭을 사용하고 (패턴 이름 등) 단위 테스트케이스를 꼼꼼히 작정한다. 다 노오력이다.

   4. 클래스와 메서드 수를 최소로 줄인다.

   위를 다 실행하고 나면 아주 조각조각 나있는 경우도 존재한다. 적당히 하자 적당히.
   물론 우선순위는 가장 낮다. 위 3가지가 더 중요하다는것이다.

 */
}
